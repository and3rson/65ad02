.zeropage

KBD_CNT: .res 1
KBD_REG: .res 1
KBD_RDY: .res 1
KBD_FLAGS: .res 1  ; 7..2=n/c, 1=EXT, 0=BREAK
KBD_FLAG_BREAK = $1
KBD_FLAG_EXT = $2
KBD_CHR: .res 1

KBD_CMD_EXT    =  $E0
KBD_CMD_BREAK  =  $F0

.code

KEYMAP:
    .byte "????????????? `?" ; 00-0F
    .byte "?????q1???zsaw2?" ; 10-1F
    .byte "?cxde43?? vftr5?" ; 20-2F
    .byte "?nbhgy6???mju78?" ; 30-3F
    .byte "?,kio09??./l;p-?" ; 40-4F
    .byte "??'?[=????",$0a,"]?\\??" ; 50-5F
    .byte "??????",$08,"??1?47???" ; 60-6F
    .byte "0.2568",$1b,"??+3-*9??" ; 70-7F
    .byte "????????????????" ; 80-8F
    .byte "????????????????" ; 90-9F
    .byte "????????????????" ; A0-AF
    .byte "????????????????" ; B0-BF
    .byte "????????????????" ; C0-CF
    .byte "????????????????" ; D0-DF
    .byte "????????????????" ; E0-EF
    .byte "????????????????" ; F0-FF
KEYMAP_SHIFTED:
    .byte "????????????? ~?" ; 00-0F
    .byte "?????Q!???ZSAW@?" ; 10-1F
    .byte "?CXDE#$?? VFTR%?" ; 20-2F
    .byte "?NBHGY^???MJU&*?" ; 30-3F
    .byte "?<KIO)(??>?L:P_?" ; 40-4F
    .byte "??",'"',"?{+?????}?|??" ; 50-5F
    .byte "?????????1?47???" ; 60-6F
    .byte "0.2568???+3-*9??" ; 70-7F
    .byte "????????????????" ; 80-8F
    .byte "????????????????" ; 90-9F
    .byte "????????????????" ; A0-AF
    .byte "????????????????" ; B0-BF
    .byte "????????????????" ; C0-CF
    .byte "????????????????" ; D0-DF
    .byte "????????????????" ; E0-EF
    .byte "????????????????" ; F0-FF

kbd_init:
        stz KBD_CNT
        stz KBD_REG
        stz KBD_RDY
        stz KBD_FLAGS
        stz KBD_CHR

        rts

; Process PS/2 bit, update keyboard flags
; Arguments:
;   A - 0 or 1
kbd_process:
        pha
        phx

        ldx KBD_CNT
        inx
        stx KBD_CNT

        ; Decide what to do with bit
        cpx #1
        beq @end  ; Start bit, ignore
        cpx #10
        beq @end  ; Parity bit, ignore
        cpx #11
        beq @ready  ; Frame complete

        ; Handle PS/2 bit as data
        ror A
        ror KBD_REG
        jmp @end

    @ready:
        ; Frame finished
        stz KBD_CNT

        ; Check is frame is BREAK
        lda KBD_REG
        cmp #KBD_CMD_BREAK
        beq @set_break
        ; Else check is frame is EXT
        cmp #KBD_CMD_EXT
        beq @set_ext
        ; Else decide what to do with char code:
        ; If any flag was set, ignore current code
        ldx KBD_FLAGS
        stz KBD_FLAGS
        bne @end
        ; Convert code into character
        tax
        lda KEYMAP, X
        sta KBD_CHR
        lda #1
        sta KBD_RDY

    @set_break:
        lda KBD_FLAGS
        ora #KBD_FLAG_BREAK
        sta KBD_FLAGS
        jmp @end

    @set_ext:
        lda KBD_FLAGS
        ora #KBD_FLAG_EXT
        sta KBD_FLAGS

    @end:
        plx
        pla

        rts


; Wait for next character
; Return:
;   A - character code
kbd_getch:
    @again:
        lda KBD_RDY
        beq @again  ; Keyboard register not ready yet

        ; Keyboard register is ready
        sei
        stz KBD_RDY  ; Clear readiness flag
        lda KBD_CHR  ; Read register
        cli

        rts

